node {
  name: "add_6/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Postprocessor/BatchMultiClassNonMaxSuppression/map/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5118
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack/Enter"
  op: "Enter"
  input: "Postprocessor/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Postprocessor/BatchMultiClassNonMaxSuppression/map/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "Postprocessor/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "Postprocessor/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "Postprocessor/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5118
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose_1/Range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose_1/Range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/div_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/div_6/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/div_5/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/div_4/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/div_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/div_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/div_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 10
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/div/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 10
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose/Range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose/Range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/div_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/div/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/Range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/Range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Postprocessor/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Postprocessor/Tile/multiples/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/Tile/multiples/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "assert_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Mismatch: number of anchors vs number of predictions"
      }
    }
  }
}
node {
  name: "assert_equal/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Shape_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "strided_slice_12"
  op: "StridedSlice"
  input: "Shape_12"
  input: "strided_slice_12/stack"
  input: "strided_slice_12/stack_1"
  input: "strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BoxPredictor_5/stack_1/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "BoxPredictor_5/stack_1/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "BoxPredictor_5/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "BoxPredictor_5/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BoxPredictor_5/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "BoxPredictor_5/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BoxPredictor_5/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BoxPredictor_5/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BoxPredictor_5/ClassPredictor/biases"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
}
node {
  name: "BoxPredictor_5/ClassPredictor/biases/read"
  op: "Identity"
  input: "BoxPredictor_5/ClassPredictor/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxPredictor_5/ClassPredictor/biases"
      }
    }
  }
}
node {
  name: "BoxPredictor_5/ClassPredictor/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 18
          }
        }
      }
    }
  }
}
node {
  name: "BoxPredictor_5/ClassPredictor/weights/read"
  op: "Identity"
  input: "BoxPredictor_5/ClassPredictor/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxPredictor_5/ClassPredictor/weights"
      }
    }
  }
}
node {
  name: "BoxPredictor_5/BoxEncodingPredictor/biases"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "BoxPredictor_5/BoxEncodingPredictor/biases/read"
  op: "Identity"
  input: "BoxPredictor_5/BoxEncodingPredictor/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxPredictor_5/BoxEncodingPredictor/biases"
      }
    }
  }
}
node {
  name: "BoxPredictor_5/BoxEncodingPredictor/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "BoxPredictor_5/BoxEncodingPredictor/weights/read"
  op: "Identity"
  input: "BoxPredictor_5/BoxEncodingPredictor/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxPredictor_5/BoxEncodingPredictor/weights"
      }
    }
  }
}
node {
  name: "BoxPredictor_4/stack_1/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "BoxPredictor_4/stack_1/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 24
      }
    }
  }
}
node {
  name: "BoxPredictor_4/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "BoxPredictor_4/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BoxPredictor_4/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 24
      }
    }
  }
}
node {
  name: "BoxPredictor_4/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BoxPredictor_4/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BoxPredictor_4/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BoxPredictor_4/ClassPredictor/biases"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
}
node {
  name: "BoxPredictor_4/ClassPredictor/biases/read"
  op: "Identity"
  input: "BoxPredictor_4/ClassPredictor/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxPredictor_4/ClassPredictor/biases"
      }
    }
  }
}
node {
  name: "BoxPredictor_4/ClassPredictor/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 18
          }
        }
      }
    }
  }
}
node {
  name: "BoxPredictor_4/ClassPredictor/weights/read"
  op: "Identity"
  input: "BoxPredictor_4/ClassPredictor/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxPredictor_4/ClassPredictor/weights"
      }
    }
  }
}
node {
  name: "BoxPredictor_4/BoxEncodingPredictor/biases"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "BoxPredictor_4/BoxEncodingPredictor/biases/read"
  op: "Identity"
  input: "BoxPredictor_4/BoxEncodingPredictor/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxPredictor_4/BoxEncodingPredictor/biases"
      }
    }
  }
}
node {
  name: "BoxPredictor_4/BoxEncodingPredictor/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "BoxPredictor_4/BoxEncodingPredictor/weights/read"
  op: "Identity"
  input: "BoxPredictor_4/BoxEncodingPredictor/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxPredictor_4/BoxEncodingPredictor/weights"
      }
    }
  }
}
node {
  name: "BoxPredictor_3/stack_1/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "BoxPredictor_3/stack_1/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "BoxPredictor_3/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "BoxPredictor_3/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BoxPredictor_3/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "BoxPredictor_3/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BoxPredictor_3/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BoxPredictor_3/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BoxPredictor_3/ClassPredictor/biases"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
}
node {
  name: "BoxPredictor_3/ClassPredictor/biases/read"
  op: "Identity"
  input: "BoxPredictor_3/ClassPredictor/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxPredictor_3/ClassPredictor/biases"
      }
    }
  }
}
node {
  name: "BoxPredictor_3/ClassPredictor/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 18
          }
        }
      }
    }
  }
}
node {
  name: "BoxPredictor_3/ClassPredictor/weights/read"
  op: "Identity"
  input: "BoxPredictor_3/ClassPredictor/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxPredictor_3/ClassPredictor/weights"
      }
    }
  }
}
node {
  name: "BoxPredictor_3/BoxEncodingPredictor/biases"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "BoxPredictor_3/BoxEncodingPredictor/biases/read"
  op: "Identity"
  input: "BoxPredictor_3/BoxEncodingPredictor/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxPredictor_3/BoxEncodingPredictor/biases"
      }
    }
  }
}
node {
  name: "BoxPredictor_3/BoxEncodingPredictor/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "BoxPredictor_3/BoxEncodingPredictor/weights/read"
  op: "Identity"
  input: "BoxPredictor_3/BoxEncodingPredictor/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxPredictor_3/BoxEncodingPredictor/weights"
      }
    }
  }
}
node {
  name: "BoxPredictor_2/stack_1/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "BoxPredictor_2/stack_1/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 384
      }
    }
  }
}
node {
  name: "BoxPredictor_2/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "BoxPredictor_2/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BoxPredictor_2/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 384
      }
    }
  }
}
node {
  name: "BoxPredictor_2/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BoxPredictor_2/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BoxPredictor_2/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BoxPredictor_2/ClassPredictor/biases"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
}
node {
  name: "BoxPredictor_2/ClassPredictor/biases/read"
  op: "Identity"
  input: "BoxPredictor_2/ClassPredictor/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxPredictor_2/ClassPredictor/biases"
      }
    }
  }
}
node {
  name: "BoxPredictor_2/ClassPredictor/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
          dim {
            size: 18
          }
        }
      }
    }
  }
}
node {
  name: "BoxPredictor_2/ClassPredictor/weights/read"
  op: "Identity"
  input: "BoxPredictor_2/ClassPredictor/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxPredictor_2/ClassPredictor/weights"
      }
    }
  }
}
node {
  name: "BoxPredictor_2/BoxEncodingPredictor/biases"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "BoxPredictor_2/BoxEncodingPredictor/biases/read"
  op: "Identity"
  input: "BoxPredictor_2/BoxEncodingPredictor/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxPredictor_2/BoxEncodingPredictor/biases"
      }
    }
  }
}
node {
  name: "BoxPredictor_2/BoxEncodingPredictor/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "BoxPredictor_2/BoxEncodingPredictor/weights/read"
  op: "Identity"
  input: "BoxPredictor_2/BoxEncodingPredictor/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxPredictor_2/BoxEncodingPredictor/weights"
      }
    }
  }
}
node {
  name: "BoxPredictor_1/stack_1/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "BoxPredictor_1/stack_1/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1536
      }
    }
  }
}
node {
  name: "BoxPredictor_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "BoxPredictor_1/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BoxPredictor_1/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1536
      }
    }
  }
}
node {
  name: "BoxPredictor_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BoxPredictor_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BoxPredictor_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BoxPredictor_1/ClassPredictor/biases"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
}
node {
  name: "BoxPredictor_1/ClassPredictor/biases/read"
  op: "Identity"
  input: "BoxPredictor_1/ClassPredictor/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxPredictor_1/ClassPredictor/biases"
      }
    }
  }
}
node {
  name: "BoxPredictor_1/ClassPredictor/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1024
          }
          dim {
            size: 18
          }
        }
      }
    }
  }
}
node {
  name: "BoxPredictor_1/ClassPredictor/weights/read"
  op: "Identity"
  input: "BoxPredictor_1/ClassPredictor/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxPredictor_1/ClassPredictor/weights"
      }
    }
  }
}
node {
  name: "BoxPredictor_1/BoxEncodingPredictor/biases"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "BoxPredictor_1/BoxEncodingPredictor/biases/read"
  op: "Identity"
  input: "BoxPredictor_1/BoxEncodingPredictor/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxPredictor_1/BoxEncodingPredictor/biases"
      }
    }
  }
}
node {
  name: "BoxPredictor_1/BoxEncodingPredictor/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1024
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "BoxPredictor_1/BoxEncodingPredictor/weights/read"
  op: "Identity"
  input: "BoxPredictor_1/BoxEncodingPredictor/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxPredictor_1/BoxEncodingPredictor/weights"
      }
    }
  }
}
node {
  name: "BoxPredictor_0/stack_1/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "BoxPredictor_0/stack_1/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3072
      }
    }
  }
}
node {
  name: "BoxPredictor_0/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "BoxPredictor_0/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BoxPredictor_0/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3072
      }
    }
  }
}
node {
  name: "BoxPredictor_0/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BoxPredictor_0/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BoxPredictor_0/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BoxPredictor_0/ClassPredictor/biases"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "BoxPredictor_0/ClassPredictor/biases/read"
  op: "Identity"
  input: "BoxPredictor_0/ClassPredictor/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxPredictor_0/ClassPredictor/biases"
      }
    }
  }
}
node {
  name: "BoxPredictor_0/ClassPredictor/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "BoxPredictor_0/ClassPredictor/weights/read"
  op: "Identity"
  input: "BoxPredictor_0/ClassPredictor/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxPredictor_0/ClassPredictor/weights"
      }
    }
  }
}
node {
  name: "BoxPredictor_0/BoxEncodingPredictor/biases"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "BoxPredictor_0/BoxEncodingPredictor/biases/read"
  op: "Identity"
  input: "BoxPredictor_0/BoxEncodingPredictor/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxPredictor_0/BoxEncodingPredictor/biases"
      }
    }
  }
}
node {
  name: "BoxPredictor_0/BoxEncodingPredictor/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "BoxPredictor_0/BoxEncodingPredictor/weights/read"
  op: "Identity"
  input: "BoxPredictor_0/BoxEncodingPredictor/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxPredictor_0/BoxEncodingPredictor/weights"
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/assert_equal/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (MultipleGridAnchorGenerator/strided_slice_12:0) = "
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/assert_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (MultipleGridAnchorGenerator/assert_equal/x:0) = "
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/assert_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/assert_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/assert_equal/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/assert_equal/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5118
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_12"
  op: "StridedSlice"
  input: "MultipleGridAnchorGenerator/Shape"
  input: "MultipleGridAnchorGenerator/strided_slice_12/stack"
  input: "MultipleGridAnchorGenerator/strided_slice_12/stack_1"
  input: "MultipleGridAnchorGenerator/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/assert_equal/Equal"
  op: "Equal"
  input: "MultipleGridAnchorGenerator/assert_equal/x"
  input: "MultipleGridAnchorGenerator/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/assert_equal/All"
  op: "All"
  input: "MultipleGridAnchorGenerator/assert_equal/Equal"
  input: "MultipleGridAnchorGenerator/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/assert_equal/Assert/Assert"
  op: "Assert"
  input: "MultipleGridAnchorGenerator/assert_equal/All"
  input: "MultipleGridAnchorGenerator/assert_equal/Assert/Assert/data_0"
  input: "MultipleGridAnchorGenerator/assert_equal/Assert/Assert/data_1"
  input: "MultipleGridAnchorGenerator/assert_equal/Assert/Assert/data_2"
  input: "MultipleGridAnchorGenerator/assert_equal/x"
  input: "MultipleGridAnchorGenerator/assert_equal/Assert/Assert/data_4"
  input: "MultipleGridAnchorGenerator/strided_slice_12"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Concatenate/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/concat_5/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_54/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_53/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape_11/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape_10/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/Rank_2"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/Rank_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/ExpandDims/input"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/Rank"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/Rank_2"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/Rank_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/ExpandDims/input"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/Rank"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/Rank_2"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/Rank_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/ExpandDims/input"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/Rank"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_11/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_11/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_11/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_11"
  op: "Range"
  input: "MultipleGridAnchorGenerator/range_11/start"
  input: "MultipleGridAnchorGenerator/range_11/limit"
  input: "MultipleGridAnchorGenerator/range_11/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_36"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/range_11"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_10/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_10/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_10/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_10"
  op: "Range"
  input: "MultipleGridAnchorGenerator/range_10/start"
  input: "MultipleGridAnchorGenerator/range_10/limit"
  input: "MultipleGridAnchorGenerator/range_10/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_35"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/range_10"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_49/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/div_17/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Sqrt_5/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Sqrt_5"
  op: "Sqrt"
  input: "MultipleGridAnchorGenerator/Sqrt_5/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_49"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_49/x"
  input: "MultipleGridAnchorGenerator/Sqrt_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/div_17"
  op: "RealDiv"
  input: "MultipleGridAnchorGenerator/div_17/x"
  input: "MultipleGridAnchorGenerator/Sqrt_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/concat_4/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_47/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_46/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape_9/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape_8/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/Rank_2"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/Rank_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/ExpandDims/input"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/Rank"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/Rank_2"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/Rank_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/ExpandDims/input"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/Rank"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/Rank_2"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/Rank_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/ExpandDims/input"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/Rank"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_9/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_9/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_9/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_9"
  op: "Range"
  input: "MultipleGridAnchorGenerator/range_9/start"
  input: "MultipleGridAnchorGenerator/range_9/limit"
  input: "MultipleGridAnchorGenerator/range_9/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_34"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/range_9"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_8/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_8/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_8/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_8"
  op: "Range"
  input: "MultipleGridAnchorGenerator/range_8/start"
  input: "MultipleGridAnchorGenerator/range_8/limit"
  input: "MultipleGridAnchorGenerator/range_8/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_33"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/range_8"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_42/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/div_16/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Sqrt_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Sqrt_4"
  op: "Sqrt"
  input: "MultipleGridAnchorGenerator/Sqrt_4/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_42"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_42/x"
  input: "MultipleGridAnchorGenerator/Sqrt_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/div_16"
  op: "RealDiv"
  input: "MultipleGridAnchorGenerator/div_16/x"
  input: "MultipleGridAnchorGenerator/Sqrt_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/concat_3/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_40/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_39/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape_7/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape_6/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/Rank_2"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/Rank_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/ExpandDims/input"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/Rank"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/Rank_2"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/Rank_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/ExpandDims/input"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/Rank"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/Rank_2"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/Rank_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/ExpandDims/input"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/Rank"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_7/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_7/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_7/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_7"
  op: "Range"
  input: "MultipleGridAnchorGenerator/range_7/start"
  input: "MultipleGridAnchorGenerator/range_7/limit"
  input: "MultipleGridAnchorGenerator/range_7/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_32"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/range_7"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_6/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_6/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_6/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_6"
  op: "Range"
  input: "MultipleGridAnchorGenerator/range_6/start"
  input: "MultipleGridAnchorGenerator/range_6/limit"
  input: "MultipleGridAnchorGenerator/range_6/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_31"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/range_6"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_35/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/div_15/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Sqrt_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Sqrt_3"
  op: "Sqrt"
  input: "MultipleGridAnchorGenerator/Sqrt_3/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_35"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_35/x"
  input: "MultipleGridAnchorGenerator/Sqrt_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/div_15"
  op: "RealDiv"
  input: "MultipleGridAnchorGenerator/div_15/x"
  input: "MultipleGridAnchorGenerator/Sqrt_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/concat_2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_33/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_32/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape_5/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape_4/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/Rank_2"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/Rank_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/ExpandDims/input"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/Rank"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/Rank_2"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/Rank_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/ExpandDims/input"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/Rank"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/Rank_2"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/Rank_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/ExpandDims/input"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/Rank"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_5/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_5/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_5/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_5"
  op: "Range"
  input: "MultipleGridAnchorGenerator/range_5/start"
  input: "MultipleGridAnchorGenerator/range_5/limit"
  input: "MultipleGridAnchorGenerator/range_5/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_30"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/range_5"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_4/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_4/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_4/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_4"
  op: "Range"
  input: "MultipleGridAnchorGenerator/range_4/start"
  input: "MultipleGridAnchorGenerator/range_4/limit"
  input: "MultipleGridAnchorGenerator/range_4/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_29"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/range_4"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_28/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/div_14/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Sqrt_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Sqrt_2"
  op: "Sqrt"
  input: "MultipleGridAnchorGenerator/Sqrt_2/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_28"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_28/x"
  input: "MultipleGridAnchorGenerator/Sqrt_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/div_14"
  op: "RealDiv"
  input: "MultipleGridAnchorGenerator/div_14/x"
  input: "MultipleGridAnchorGenerator/Sqrt_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_26/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_25/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape_3/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape_2/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/Rank_2"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/Rank_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/ExpandDims/input"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/Rank"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/Rank_2"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/Rank_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/ExpandDims/input"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/Rank"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/Rank_2"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/Rank_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/ExpandDims/input"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/Rank"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_3/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_3/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_3/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_3"
  op: "Range"
  input: "MultipleGridAnchorGenerator/range_3/start"
  input: "MultipleGridAnchorGenerator/range_3/limit"
  input: "MultipleGridAnchorGenerator/range_3/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_28"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/range_3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_2/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_2/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_2/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_2"
  op: "Range"
  input: "MultipleGridAnchorGenerator/range_2/start"
  input: "MultipleGridAnchorGenerator/range_2/limit"
  input: "MultipleGridAnchorGenerator/range_2/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_27"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/range_2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_21/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/div_13/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Sqrt_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Sqrt_1"
  op: "Sqrt"
  input: "MultipleGridAnchorGenerator/Sqrt_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_21"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_21/x"
  input: "MultipleGridAnchorGenerator/Sqrt_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/div_13"
  op: "RealDiv"
  input: "MultipleGridAnchorGenerator/div_13/x"
  input: "MultipleGridAnchorGenerator/Sqrt_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_19/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_18/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/Rank_2"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/Rank_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/ExpandDims/input"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/Rank"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/Rank_2"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/Rank_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/ExpandDims/input"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/Rank"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid/Rank_2"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid/Rank_1"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/ExpandDims/input"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid/Rank"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_1/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_1"
  op: "Range"
  input: "MultipleGridAnchorGenerator/range_1/start"
  input: "MultipleGridAnchorGenerator/range_1/limit"
  input: "MultipleGridAnchorGenerator/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_26"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/range_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range"
  op: "Range"
  input: "MultipleGridAnchorGenerator/range/start"
  input: "MultipleGridAnchorGenerator/range/limit"
  input: "MultipleGridAnchorGenerator/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_25"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/range"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_14/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/div_12/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Sqrt/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Sqrt"
  op: "Sqrt"
  input: "MultipleGridAnchorGenerator/Sqrt/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_14"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_14/x"
  input: "MultipleGridAnchorGenerator/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/div_12"
  op: "RealDiv"
  input: "MultipleGridAnchorGenerator/div_12/x"
  input: "MultipleGridAnchorGenerator/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Minimum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Minimum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Minimum"
  op: "Minimum"
  input: "MultipleGridAnchorGenerator/Minimum/x"
  input: "MultipleGridAnchorGenerator/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_24"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/Minimum"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_11/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_10/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_9/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_8/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_5/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_23/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_23"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/ToFloat_23/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_22/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_22"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/ToFloat_22/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/div_11"
  op: "RealDiv"
  input: "MultipleGridAnchorGenerator/ToFloat_22"
  input: "MultipleGridAnchorGenerator/ToFloat_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_52"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/ToFloat_36"
  input: "MultipleGridAnchorGenerator/div_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_11"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_11/x"
  input: "MultipleGridAnchorGenerator/div_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/add_16"
  op: "Add"
  input: "MultipleGridAnchorGenerator/mul_52"
  input: "MultipleGridAnchorGenerator/mul_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/add_16"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/Tile"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/Reshape_1"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/Tile_1"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/Reshape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_21/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_21"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/ToFloat_21/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_20/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_20"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/ToFloat_20/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/div_10"
  op: "RealDiv"
  input: "MultipleGridAnchorGenerator/ToFloat_20"
  input: "MultipleGridAnchorGenerator/ToFloat_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_51"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/ToFloat_35"
  input: "MultipleGridAnchorGenerator/div_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_10"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_10/x"
  input: "MultipleGridAnchorGenerator/div_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/add_15"
  op: "Add"
  input: "MultipleGridAnchorGenerator/mul_51"
  input: "MultipleGridAnchorGenerator/mul_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/Reshape_1"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/add_15"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_15/Tile_1"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/Reshape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/Reshape_1"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_15/Tile_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/Tile_1"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/Reshape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/stack_10"
  op: "Pack"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/Tile_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/Tile_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 3
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape_10"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/stack_10"
  input: "MultipleGridAnchorGenerator/Reshape_10/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_19/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_19"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/ToFloat_19/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_18/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_18"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/ToFloat_18/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/div_9"
  op: "RealDiv"
  input: "MultipleGridAnchorGenerator/ToFloat_18"
  input: "MultipleGridAnchorGenerator/ToFloat_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_45"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/ToFloat_34"
  input: "MultipleGridAnchorGenerator/div_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_9"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_9/x"
  input: "MultipleGridAnchorGenerator/div_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/add_13"
  op: "Add"
  input: "MultipleGridAnchorGenerator/mul_45"
  input: "MultipleGridAnchorGenerator/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/add_13"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/Tile"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/Reshape_1"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/Tile_1"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/Reshape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_17/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_17"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/ToFloat_17/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_16/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_16"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/ToFloat_16/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/div_8"
  op: "RealDiv"
  input: "MultipleGridAnchorGenerator/ToFloat_16"
  input: "MultipleGridAnchorGenerator/ToFloat_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_44"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/ToFloat_33"
  input: "MultipleGridAnchorGenerator/div_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_8"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_8/x"
  input: "MultipleGridAnchorGenerator/div_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/add_12"
  op: "Add"
  input: "MultipleGridAnchorGenerator/mul_44"
  input: "MultipleGridAnchorGenerator/mul_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/Reshape_1"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/add_12"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_12/Tile_1"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/Reshape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/Reshape_1"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_12/Tile_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/Tile_1"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/Reshape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/stack_8"
  op: "Pack"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/Tile_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/Tile_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 3
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape_8"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/stack_8"
  input: "MultipleGridAnchorGenerator/Reshape_8/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_15/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_15"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/ToFloat_15/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_14/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_14"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/ToFloat_14/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/div_7"
  op: "RealDiv"
  input: "MultipleGridAnchorGenerator/ToFloat_14"
  input: "MultipleGridAnchorGenerator/ToFloat_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_38"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/ToFloat_32"
  input: "MultipleGridAnchorGenerator/div_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_7"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_7/x"
  input: "MultipleGridAnchorGenerator/div_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/add_10"
  op: "Add"
  input: "MultipleGridAnchorGenerator/mul_38"
  input: "MultipleGridAnchorGenerator/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/add_10"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/Tile"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/Reshape_1"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/Tile_1"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/Reshape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_13/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_13"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/ToFloat_13/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_12/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_12"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/ToFloat_12/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/div_6"
  op: "RealDiv"
  input: "MultipleGridAnchorGenerator/ToFloat_12"
  input: "MultipleGridAnchorGenerator/ToFloat_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_37"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/ToFloat_31"
  input: "MultipleGridAnchorGenerator/div_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_6"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_6/x"
  input: "MultipleGridAnchorGenerator/div_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/add_9"
  op: "Add"
  input: "MultipleGridAnchorGenerator/mul_37"
  input: "MultipleGridAnchorGenerator/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/Reshape_1"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/add_9"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_9/Tile_1"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/Reshape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/Reshape_1"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_9/Tile_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/Tile_1"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/Reshape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/stack_6"
  op: "Pack"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/Tile_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/Tile_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 3
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape_6"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/stack_6"
  input: "MultipleGridAnchorGenerator/Reshape_6/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_11/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_11"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/ToFloat_11/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_10/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_10"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/ToFloat_10/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/div_5"
  op: "RealDiv"
  input: "MultipleGridAnchorGenerator/ToFloat_10"
  input: "MultipleGridAnchorGenerator/ToFloat_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_31"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/ToFloat_30"
  input: "MultipleGridAnchorGenerator/div_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_5"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_5/x"
  input: "MultipleGridAnchorGenerator/div_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/add_7"
  op: "Add"
  input: "MultipleGridAnchorGenerator/mul_31"
  input: "MultipleGridAnchorGenerator/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/add_7"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/Tile"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/Reshape_1"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/Tile_1"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/Reshape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_9/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_9"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/ToFloat_9/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_8/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_8"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/ToFloat_8/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/div_4"
  op: "RealDiv"
  input: "MultipleGridAnchorGenerator/ToFloat_8"
  input: "MultipleGridAnchorGenerator/ToFloat_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_30"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/ToFloat_29"
  input: "MultipleGridAnchorGenerator/div_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_4"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_4/x"
  input: "MultipleGridAnchorGenerator/div_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/add_6"
  op: "Add"
  input: "MultipleGridAnchorGenerator/mul_30"
  input: "MultipleGridAnchorGenerator/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/Reshape_1"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/add_6"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_6/Tile_1"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/Reshape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/Reshape_1"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_6/Tile_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/Tile_1"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/Reshape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/stack_4"
  op: "Pack"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/Tile_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/Tile_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 3
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape_4"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/stack_4"
  input: "MultipleGridAnchorGenerator/Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_7"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/ToFloat_7/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_6"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/ToFloat_6/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/div_3"
  op: "RealDiv"
  input: "MultipleGridAnchorGenerator/ToFloat_6"
  input: "MultipleGridAnchorGenerator/ToFloat_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_24"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/ToFloat_28"
  input: "MultipleGridAnchorGenerator/div_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_3"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_3/x"
  input: "MultipleGridAnchorGenerator/div_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/add_4"
  op: "Add"
  input: "MultipleGridAnchorGenerator/mul_24"
  input: "MultipleGridAnchorGenerator/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/add_4"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/Tile"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/Reshape_1"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/Tile_1"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/Reshape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_5/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_5"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/ToFloat_5/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_4"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/ToFloat_4/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/div_2"
  op: "RealDiv"
  input: "MultipleGridAnchorGenerator/ToFloat_4"
  input: "MultipleGridAnchorGenerator/ToFloat_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_23"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/ToFloat_27"
  input: "MultipleGridAnchorGenerator/div_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_2"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_2/x"
  input: "MultipleGridAnchorGenerator/div_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/add_3"
  op: "Add"
  input: "MultipleGridAnchorGenerator/mul_23"
  input: "MultipleGridAnchorGenerator/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/Reshape_1"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/add_3"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_3/Tile_1"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/Reshape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/Reshape_1"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_3/Tile_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/Tile_1"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/Reshape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/stack_2"
  op: "Pack"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/Tile_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/Tile_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 3
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape_2"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/stack_2"
  input: "MultipleGridAnchorGenerator/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_3"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/ToFloat_3/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_2"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/ToFloat_2/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/div_1"
  op: "RealDiv"
  input: "MultipleGridAnchorGenerator/ToFloat_2"
  input: "MultipleGridAnchorGenerator/ToFloat_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_17"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/ToFloat_26"
  input: "MultipleGridAnchorGenerator/div_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_1"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_1/x"
  input: "MultipleGridAnchorGenerator/div_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/add_1"
  op: "Add"
  input: "MultipleGridAnchorGenerator/mul_17"
  input: "MultipleGridAnchorGenerator/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/add_1"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/Tile"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/Reshape_1"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid/Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/Tile_1"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/Reshape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat_1"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/ToFloat_1/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ToFloat"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/ToFloat/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/div"
  op: "RealDiv"
  input: "MultipleGridAnchorGenerator/ToFloat"
  input: "MultipleGridAnchorGenerator/ToFloat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_16"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/ToFloat_25"
  input: "MultipleGridAnchorGenerator/div"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul/x"
  input: "MultipleGridAnchorGenerator/div"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/add"
  op: "Add"
  input: "MultipleGridAnchorGenerator/mul_16"
  input: "MultipleGridAnchorGenerator/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/Reshape_1"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/add"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/Tile_1"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid/Reshape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/Reshape_1"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid/Tile_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/Tile_1"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/Reshape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/stack"
  op: "Pack"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/Tile_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/Tile_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 3
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/stack"
  input: "MultipleGridAnchorGenerator/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1024
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1024
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/depthwise_weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_0/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_0/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV1/Conv2d_0/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV1/Conv2d_0/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "image size must at least be 33 in both height and width."
      }
    }
  }
}
node {
  name: "FeatureExtractor/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 33
      }
    }
  }
}
node {
  name: "FeatureExtractor/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "FeatureExtractor/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "FeatureExtractor/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 33
      }
    }
  }
}
node {
  name: "FeatureExtractor/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "FeatureExtractor/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00784313772
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Preprocessor/map/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/Enter"
  op: "Enter"
  input: "Preprocessor/map/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Preprocessor/map/while/Preprocessor/map/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "Preprocessor/map/while/Merge"
  op: "Merge"
  input: "Preprocessor/map/while/Enter"
  input: "Preprocessor/map/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Preprocessor/map/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "image_tensor"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "ToFloat"
  op: "Cast"
  input: "image_tensor"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "Preprocessor/map/TensorArrayUnstack/Shape"
  input: "Preprocessor/map/TensorArrayUnstack/strided_slice/stack"
  input: "Preprocessor/map/TensorArrayUnstack/strided_slice/stack_1"
  input: "Preprocessor/map/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/range"
  op: "Range"
  input: "Preprocessor/map/TensorArrayUnstack/range/start"
  input: "Preprocessor/map/TensorArrayUnstack/strided_slice"
  input: "Preprocessor/map/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/Shape"
  op: "Shape"
  input: "ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/strided_slice"
  op: "StridedSlice"
  input: "Preprocessor/map/Shape"
  input: "Preprocessor/map/strided_slice/stack"
  input: "Preprocessor/map/strided_slice/stack_1"
  input: "Preprocessor/map/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Preprocessor/map/while/Less/Enter"
  op: "Enter"
  input: "Preprocessor/map/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Preprocessor/map/while/Preprocessor/map/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "Preprocessor/map/while/Less"
  op: "Less"
  input: "Preprocessor/map/while/Merge"
  input: "Preprocessor/map/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/LoopCond"
  op: "LoopCond"
  input: "Preprocessor/map/while/Less"
}
node {
  name: "Preprocessor/map/while/Switch"
  op: "Switch"
  input: "Preprocessor/map/while/Merge"
  input: "Preprocessor/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/while/Merge"
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/Identity"
  op: "Identity"
  input: "Preprocessor/map/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/add/y"
  op: "Const"
  input: "^Preprocessor/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/add"
  op: "Add"
  input: "Preprocessor/map/while/Identity"
  input: "Preprocessor/map/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/NextIteration"
  op: "NextIteration"
  input: "Preprocessor/map/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/size"
  op: "Const"
  input: "^Preprocessor/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/ExpandDims/dim"
  op: "Const"
  input: "^Preprocessor/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArray_1"
  op: "TensorArrayV3"
  input: "Preprocessor/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Preprocessor/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "Preprocessor/map/TensorArray_1"
  attr {
    key: "T"
    value {
      type: 20
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/while/ResizeImage/Squeeze"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Preprocessor/map/while/Preprocessor/map/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "Preprocessor/map/while/Enter_1"
  op: "Enter"
  input: "Preprocessor/map/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Preprocessor/map/while/Preprocessor/map/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "Preprocessor/map/while/Merge_1"
  op: "Merge"
  input: "Preprocessor/map/while/Enter_1"
  input: "Preprocessor/map/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Preprocessor/map/while/Switch_1"
  op: "Switch"
  input: "Preprocessor/map/while/Merge_1"
  input: "Preprocessor/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/while/Merge_1"
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/Exit_1"
  op: "Exit"
  input: "Preprocessor/map/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "Preprocessor/map/TensorArray_1"
  input: "Preprocessor/map/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/TensorArray_1"
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayStack/range"
  op: "Range"
  input: "Preprocessor/map/TensorArrayStack/range/start"
  input: "Preprocessor/map/TensorArrayStack/TensorArraySizeV3"
  input: "Preprocessor/map/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/TensorArray_1"
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "Preprocessor/map/TensorArray_1"
  input: "Preprocessor/map/TensorArrayStack/range"
  input: "Preprocessor/map/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 512
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Preprocessor/mul"
  op: "Mul"
  input: "Preprocessor/mul/x"
  input: "Preprocessor/map/TensorArrayStack/TensorArrayGatherV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Preprocessor/sub"
  op: "Sub"
  input: "Preprocessor/mul"
  input: "Preprocessor/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/Shape_1"
  op: "Shape"
  input: "Preprocessor/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/strided_slice_1"
  op: "StridedSlice"
  input: "FeatureExtractor/Shape_1"
  input: "FeatureExtractor/strided_slice_1/stack"
  input: "FeatureExtractor/strided_slice_1/stack_1"
  input: "FeatureExtractor/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "FeatureExtractor/GreaterEqual_1"
  op: "GreaterEqual"
  input: "FeatureExtractor/strided_slice_1"
  input: "FeatureExtractor/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/Shape"
  op: "Shape"
  input: "Preprocessor/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/strided_slice"
  op: "StridedSlice"
  input: "FeatureExtractor/Shape"
  input: "FeatureExtractor/strided_slice/stack"
  input: "FeatureExtractor/strided_slice/stack_1"
  input: "FeatureExtractor/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "FeatureExtractor/GreaterEqual"
  op: "GreaterEqual"
  input: "FeatureExtractor/strided_slice"
  input: "FeatureExtractor/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/LogicalAnd"
  op: "LogicalAnd"
  input: "FeatureExtractor/GreaterEqual"
  input: "FeatureExtractor/GreaterEqual_1"
}
node {
  name: "FeatureExtractor/Assert/Assert"
  op: "Assert"
  input: "FeatureExtractor/LogicalAnd"
  input: "FeatureExtractor/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/concat_7/axis"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_7/Const"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_7/shape/3"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_7/shape/2"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_7/shape/1"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/concat_6/axis"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_6/Const"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_6/shape/3"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_6/shape/2"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_6/shape/1"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/strided_slice_3/stack_2"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/strided_slice_3/stack_1"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/strided_slice_3/stack"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/concat_5/axis"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_5/Const"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_5/shape/3"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_5/shape/2"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_5/shape/1"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/concat_4/axis"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_4/Const"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_4/shape/3"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_4/shape/2"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_4/shape/1"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/strided_slice_2/stack_2"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/strided_slice_2/stack_1"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/strided_slice_2/stack"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/concat_3/axis"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_3/Const"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_3/shape/3"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_3/shape/2"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_3/shape/1"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/concat_2/axis"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_2/Const"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_2/shape/3"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_2/shape/2"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_2/shape/1"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/strided_slice_1/stack_2"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/strided_slice_1/stack_1"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/strided_slice_1/stack"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/concat_1/axis"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_1/Const"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_1/shape/3"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_1/shape/2"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_1/shape/1"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/concat/axis"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros/Const"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros/shape/3"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros/shape/2"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros/shape/1"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/strided_slice/stack_2"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/strided_slice/stack_1"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/strided_slice/stack"
  op: "Const"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_0/convolution"
  op: "Conv2D"
  input: "Preprocessor/sub"
  input: "FeatureExtractor/MobilenetV1/Conv2d_0/weights/read"
  input: "^FeatureExtractor/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_0/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_0/convolution"
  input: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_0/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_0/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_0/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_1_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_0/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_1_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_1_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_1_pointwise/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_1_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_1_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_1_pointwise/convolution"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_1_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_1_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_2_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_1_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_2_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_2_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_2_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_2_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_2_pointwise/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_2_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_2_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_2_pointwise/convolution"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_2_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_2_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_3_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_2_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_3_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_3_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_3_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_3_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_3_pointwise/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_3_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_3_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_3_pointwise/convolution"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_3_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_3_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_4_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_3_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_4_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_4_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_4_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_4_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_4_pointwise/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_4_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_4_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_4_pointwise/convolution"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_4_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_4_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_5_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_4_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_5_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_5_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_5_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_5_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_5_pointwise/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_5_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_5_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_5_pointwise/convolution"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_5_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_5_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_6_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_5_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_6_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_6_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_6_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_6_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_6_pointwise/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_6_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_6_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_6_pointwise/convolution"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_6_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_6_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_7_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_6_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_7_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_7_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_7_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_7_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_7_pointwise/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_7_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_7_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_7_pointwise/convolution"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_7_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_7_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_8_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_7_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_8_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_8_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_8_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_8_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_8_pointwise/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_8_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_8_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_8_pointwise/convolution"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_8_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_8_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_9_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_8_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_9_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_9_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_9_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_9_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_9_pointwise/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_9_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_9_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_9_pointwise/convolution"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_9_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_9_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_10_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_9_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_10_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_10_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_10_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_10_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_10_pointwise/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_10_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_10_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_10_pointwise/convolution"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_10_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_10_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_10_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_pointwise/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_pointwise/convolution"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BoxPredictor_0/Shape"
  op: "Shape"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BoxPredictor_0/strided_slice"
  op: "StridedSlice"
  input: "BoxPredictor_0/Shape"
  input: "BoxPredictor_0/strided_slice/stack"
  input: "BoxPredictor_0/strided_slice/stack_1"
  input: "BoxPredictor_0/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "BoxPredictor_0/stack_1"
  op: "Pack"
  input: "BoxPredictor_0/strided_slice"
  input: "BoxPredictor_0/stack_1/1"
  input: "BoxPredictor_0/stack_1/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "BoxPredictor_0/stack"
  op: "Pack"
  input: "BoxPredictor_0/strided_slice"
  input: "BoxPredictor_0/stack/1"
  input: "BoxPredictor_0/stack/2"
  input: "BoxPredictor_0/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "BoxPredictor_0/ClassPredictor/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Relu6"
  input: "BoxPredictor_0/ClassPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "BoxPredictor_0/ClassPredictor/BiasAdd"
  op: "BiasAdd"
  input: "BoxPredictor_0/ClassPredictor/convolution"
  input: "BoxPredictor_0/ClassPredictor/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "BoxPredictor_0/Reshape_1"
  op: "Reshape"
  input: "BoxPredictor_0/ClassPredictor/BiasAdd"
  input: "BoxPredictor_0/stack_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BoxPredictor_0/BoxEncodingPredictor/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Relu6"
  input: "BoxPredictor_0/BoxEncodingPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "BoxPredictor_0/BoxEncodingPredictor/BiasAdd"
  op: "BiasAdd"
  input: "BoxPredictor_0/BoxEncodingPredictor/convolution"
  input: "BoxPredictor_0/BoxEncodingPredictor/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "BoxPredictor_0/Reshape"
  op: "Reshape"
  input: "BoxPredictor_0/BoxEncodingPredictor/BiasAdd"
  input: "BoxPredictor_0/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Squeeze"
  op: "Squeeze"
  input: "BoxPredictor_0/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "Shape_6"
  op: "Shape"
  input: "Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_6"
  op: "StridedSlice"
  input: "Shape_6"
  input: "strided_slice_6/stack"
  input: "strided_slice_6/stack_1"
  input: "strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "add"
  op: "Add"
  input: "add/x"
  input: "strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_12_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_12_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_12_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_12_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_12_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_12_pointwise/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_12_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_12_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_12_pointwise/convolution"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_12_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_12_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_12_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_pointwise/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_depthwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_pointwise/convolution"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_pointwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BoxPredictor_1/Shape"
  op: "Shape"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BoxPredictor_1/strided_slice"
  op: "StridedSlice"
  input: "BoxPredictor_1/Shape"
  input: "BoxPredictor_1/strided_slice/stack"
  input: "BoxPredictor_1/strided_slice/stack_1"
  input: "BoxPredictor_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "BoxPredictor_1/stack_1"
  op: "Pack"
  input: "BoxPredictor_1/strided_slice"
  input: "BoxPredictor_1/stack_1/1"
  input: "BoxPredictor_1/stack_1/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "BoxPredictor_1/stack"
  op: "Pack"
  input: "BoxPredictor_1/strided_slice"
  input: "BoxPredictor_1/stack/1"
  input: "BoxPredictor_1/stack/2"
  input: "BoxPredictor_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "BoxPredictor_1/ClassPredictor/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Relu6"
  input: "BoxPredictor_1/ClassPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "BoxPredictor_1/ClassPredictor/BiasAdd"
  op: "BiasAdd"
  input: "BoxPredictor_1/ClassPredictor/convolution"
  input: "BoxPredictor_1/ClassPredictor/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "BoxPredictor_1/Reshape_1"
  op: "Reshape"
  input: "BoxPredictor_1/ClassPredictor/BiasAdd"
  input: "BoxPredictor_1/stack_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BoxPredictor_1/BoxEncodingPredictor/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Relu6"
  input: "BoxPredictor_1/BoxEncodingPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "BoxPredictor_1/BoxEncodingPredictor/BiasAdd"
  op: "BiasAdd"
  input: "BoxPredictor_1/BoxEncodingPredictor/convolution"
  input: "BoxPredictor_1/BoxEncodingPredictor/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "BoxPredictor_1/Reshape"
  op: "Reshape"
  input: "BoxPredictor_1/BoxEncodingPredictor/BiasAdd"
  input: "BoxPredictor_1/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Squeeze_1"
  op: "Squeeze"
  input: "BoxPredictor_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "Shape_7"
  op: "Shape"
  input: "Squeeze_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_7"
  op: "StridedSlice"
  input: "Shape_7"
  input: "strided_slice_7/stack"
  input: "strided_slice_7/stack_1"
  input: "strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "add_1"
  op: "Add"
  input: "add"
  input: "strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/convolution"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Shape"
  op: "Shape"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/strided_slice"
  op: "StridedSlice"
  input: "FeatureExtractor/MobilenetV1/Shape"
  input: "FeatureExtractor/MobilenetV1/strided_slice/stack"
  input: "FeatureExtractor/MobilenetV1/strided_slice/stack_1"
  input: "FeatureExtractor/MobilenetV1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_1/shape"
  op: "Pack"
  input: "FeatureExtractor/MobilenetV1/strided_slice"
  input: "FeatureExtractor/MobilenetV1/zeros_1/shape/1"
  input: "FeatureExtractor/MobilenetV1/zeros_1/shape/2"
  input: "FeatureExtractor/MobilenetV1/zeros_1/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_1"
  op: "Fill"
  input: "FeatureExtractor/MobilenetV1/zeros_1/shape"
  input: "FeatureExtractor/MobilenetV1/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros/shape"
  op: "Pack"
  input: "FeatureExtractor/MobilenetV1/strided_slice"
  input: "FeatureExtractor/MobilenetV1/zeros/shape/1"
  input: "FeatureExtractor/MobilenetV1/zeros/shape/2"
  input: "FeatureExtractor/MobilenetV1/zeros/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros"
  op: "Fill"
  input: "FeatureExtractor/MobilenetV1/zeros/shape"
  input: "FeatureExtractor/MobilenetV1/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/concat"
  op: "ConcatV2"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_2_1x1_256/Relu6"
  input: "FeatureExtractor/MobilenetV1/zeros"
  input: "FeatureExtractor/MobilenetV1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/concat_1"
  op: "ConcatV2"
  input: "FeatureExtractor/MobilenetV1/concat"
  input: "FeatureExtractor/MobilenetV1/zeros_1"
  input: "FeatureExtractor/MobilenetV1/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/concat_1"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/convolution"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BoxPredictor_2/Shape"
  op: "Shape"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BoxPredictor_2/strided_slice"
  op: "StridedSlice"
  input: "BoxPredictor_2/Shape"
  input: "BoxPredictor_2/strided_slice/stack"
  input: "BoxPredictor_2/strided_slice/stack_1"
  input: "BoxPredictor_2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "BoxPredictor_2/stack_1"
  op: "Pack"
  input: "BoxPredictor_2/strided_slice"
  input: "BoxPredictor_2/stack_1/1"
  input: "BoxPredictor_2/stack_1/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "BoxPredictor_2/stack"
  op: "Pack"
  input: "BoxPredictor_2/strided_slice"
  input: "BoxPredictor_2/stack/1"
  input: "BoxPredictor_2/stack/2"
  input: "BoxPredictor_2/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "BoxPredictor_2/ClassPredictor/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/Relu6"
  input: "BoxPredictor_2/ClassPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "BoxPredictor_2/ClassPredictor/BiasAdd"
  op: "BiasAdd"
  input: "BoxPredictor_2/ClassPredictor/convolution"
  input: "BoxPredictor_2/ClassPredictor/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "BoxPredictor_2/Reshape_1"
  op: "Reshape"
  input: "BoxPredictor_2/ClassPredictor/BiasAdd"
  input: "BoxPredictor_2/stack_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BoxPredictor_2/BoxEncodingPredictor/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/Relu6"
  input: "BoxPredictor_2/BoxEncodingPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "BoxPredictor_2/BoxEncodingPredictor/BiasAdd"
  op: "BiasAdd"
  input: "BoxPredictor_2/BoxEncodingPredictor/convolution"
  input: "BoxPredictor_2/BoxEncodingPredictor/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "BoxPredictor_2/Reshape"
  op: "Reshape"
  input: "BoxPredictor_2/BoxEncodingPredictor/BiasAdd"
  input: "BoxPredictor_2/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Squeeze_2"
  op: "Squeeze"
  input: "BoxPredictor_2/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "Shape_8"
  op: "Shape"
  input: "Squeeze_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_8"
  op: "StridedSlice"
  input: "Shape_8"
  input: "strided_slice_8/stack"
  input: "strided_slice_8/stack_1"
  input: "strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "add_2"
  op: "Add"
  input: "add_1"
  input: "strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_2_3x3_s2_512/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/convolution"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Shape_1"
  op: "Shape"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/strided_slice_1"
  op: "StridedSlice"
  input: "FeatureExtractor/MobilenetV1/Shape_1"
  input: "FeatureExtractor/MobilenetV1/strided_slice_1/stack"
  input: "FeatureExtractor/MobilenetV1/strided_slice_1/stack_1"
  input: "FeatureExtractor/MobilenetV1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_3/shape"
  op: "Pack"
  input: "FeatureExtractor/MobilenetV1/strided_slice_1"
  input: "FeatureExtractor/MobilenetV1/zeros_3/shape/1"
  input: "FeatureExtractor/MobilenetV1/zeros_3/shape/2"
  input: "FeatureExtractor/MobilenetV1/zeros_3/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_3"
  op: "Fill"
  input: "FeatureExtractor/MobilenetV1/zeros_3/shape"
  input: "FeatureExtractor/MobilenetV1/zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_2/shape"
  op: "Pack"
  input: "FeatureExtractor/MobilenetV1/strided_slice_1"
  input: "FeatureExtractor/MobilenetV1/zeros_2/shape/1"
  input: "FeatureExtractor/MobilenetV1/zeros_2/shape/2"
  input: "FeatureExtractor/MobilenetV1/zeros_2/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_2"
  op: "Fill"
  input: "FeatureExtractor/MobilenetV1/zeros_2/shape"
  input: "FeatureExtractor/MobilenetV1/zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/concat_2"
  op: "ConcatV2"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_3_1x1_128/Relu6"
  input: "FeatureExtractor/MobilenetV1/zeros_2"
  input: "FeatureExtractor/MobilenetV1/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/concat_3"
  op: "ConcatV2"
  input: "FeatureExtractor/MobilenetV1/concat_2"
  input: "FeatureExtractor/MobilenetV1/zeros_3"
  input: "FeatureExtractor/MobilenetV1/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/concat_3"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/convolution"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BoxPredictor_3/Shape"
  op: "Shape"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BoxPredictor_3/strided_slice"
  op: "StridedSlice"
  input: "BoxPredictor_3/Shape"
  input: "BoxPredictor_3/strided_slice/stack"
  input: "BoxPredictor_3/strided_slice/stack_1"
  input: "BoxPredictor_3/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "BoxPredictor_3/stack_1"
  op: "Pack"
  input: "BoxPredictor_3/strided_slice"
  input: "BoxPredictor_3/stack_1/1"
  input: "BoxPredictor_3/stack_1/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "BoxPredictor_3/stack"
  op: "Pack"
  input: "BoxPredictor_3/strided_slice"
  input: "BoxPredictor_3/stack/1"
  input: "BoxPredictor_3/stack/2"
  input: "BoxPredictor_3/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "BoxPredictor_3/ClassPredictor/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/Relu6"
  input: "BoxPredictor_3/ClassPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "BoxPredictor_3/ClassPredictor/BiasAdd"
  op: "BiasAdd"
  input: "BoxPredictor_3/ClassPredictor/convolution"
  input: "BoxPredictor_3/ClassPredictor/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "BoxPredictor_3/Reshape_1"
  op: "Reshape"
  input: "BoxPredictor_3/ClassPredictor/BiasAdd"
  input: "BoxPredictor_3/stack_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BoxPredictor_3/BoxEncodingPredictor/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/Relu6"
  input: "BoxPredictor_3/BoxEncodingPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "BoxPredictor_3/BoxEncodingPredictor/BiasAdd"
  op: "BiasAdd"
  input: "BoxPredictor_3/BoxEncodingPredictor/convolution"
  input: "BoxPredictor_3/BoxEncodingPredictor/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "BoxPredictor_3/Reshape"
  op: "Reshape"
  input: "BoxPredictor_3/BoxEncodingPredictor/BiasAdd"
  input: "BoxPredictor_3/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Squeeze_3"
  op: "Squeeze"
  input: "BoxPredictor_3/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "Shape_9"
  op: "Shape"
  input: "Squeeze_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_9"
  op: "StridedSlice"
  input: "Shape_9"
  input: "strided_slice_9/stack"
  input: "strided_slice_9/stack_1"
  input: "strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "add_3"
  op: "Add"
  input: "add_2"
  input: "strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_3_3x3_s2_256/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/convolution"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Shape_2"
  op: "Shape"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/strided_slice_2"
  op: "StridedSlice"
  input: "FeatureExtractor/MobilenetV1/Shape_2"
  input: "FeatureExtractor/MobilenetV1/strided_slice_2/stack"
  input: "FeatureExtractor/MobilenetV1/strided_slice_2/stack_1"
  input: "FeatureExtractor/MobilenetV1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_5/shape"
  op: "Pack"
  input: "FeatureExtractor/MobilenetV1/strided_slice_2"
  input: "FeatureExtractor/MobilenetV1/zeros_5/shape/1"
  input: "FeatureExtractor/MobilenetV1/zeros_5/shape/2"
  input: "FeatureExtractor/MobilenetV1/zeros_5/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_5"
  op: "Fill"
  input: "FeatureExtractor/MobilenetV1/zeros_5/shape"
  input: "FeatureExtractor/MobilenetV1/zeros_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_4/shape"
  op: "Pack"
  input: "FeatureExtractor/MobilenetV1/strided_slice_2"
  input: "FeatureExtractor/MobilenetV1/zeros_4/shape/1"
  input: "FeatureExtractor/MobilenetV1/zeros_4/shape/2"
  input: "FeatureExtractor/MobilenetV1/zeros_4/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_4"
  op: "Fill"
  input: "FeatureExtractor/MobilenetV1/zeros_4/shape"
  input: "FeatureExtractor/MobilenetV1/zeros_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/concat_4"
  op: "ConcatV2"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_4_1x1_128/Relu6"
  input: "FeatureExtractor/MobilenetV1/zeros_4"
  input: "FeatureExtractor/MobilenetV1/concat_4/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/concat_5"
  op: "ConcatV2"
  input: "FeatureExtractor/MobilenetV1/concat_4"
  input: "FeatureExtractor/MobilenetV1/zeros_5"
  input: "FeatureExtractor/MobilenetV1/concat_5/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/concat_5"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/convolution"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BoxPredictor_4/Shape"
  op: "Shape"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BoxPredictor_4/strided_slice"
  op: "StridedSlice"
  input: "BoxPredictor_4/Shape"
  input: "BoxPredictor_4/strided_slice/stack"
  input: "BoxPredictor_4/strided_slice/stack_1"
  input: "BoxPredictor_4/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "BoxPredictor_4/stack_1"
  op: "Pack"
  input: "BoxPredictor_4/strided_slice"
  input: "BoxPredictor_4/stack_1/1"
  input: "BoxPredictor_4/stack_1/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "BoxPredictor_4/stack"
  op: "Pack"
  input: "BoxPredictor_4/strided_slice"
  input: "BoxPredictor_4/stack/1"
  input: "BoxPredictor_4/stack/2"
  input: "BoxPredictor_4/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "BoxPredictor_4/ClassPredictor/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/Relu6"
  input: "BoxPredictor_4/ClassPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "BoxPredictor_4/ClassPredictor/BiasAdd"
  op: "BiasAdd"
  input: "BoxPredictor_4/ClassPredictor/convolution"
  input: "BoxPredictor_4/ClassPredictor/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "BoxPredictor_4/Reshape_1"
  op: "Reshape"
  input: "BoxPredictor_4/ClassPredictor/BiasAdd"
  input: "BoxPredictor_4/stack_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BoxPredictor_4/BoxEncodingPredictor/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/Relu6"
  input: "BoxPredictor_4/BoxEncodingPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "BoxPredictor_4/BoxEncodingPredictor/BiasAdd"
  op: "BiasAdd"
  input: "BoxPredictor_4/BoxEncodingPredictor/convolution"
  input: "BoxPredictor_4/BoxEncodingPredictor/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "BoxPredictor_4/Reshape"
  op: "Reshape"
  input: "BoxPredictor_4/BoxEncodingPredictor/BiasAdd"
  input: "BoxPredictor_4/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Squeeze_4"
  op: "Squeeze"
  input: "BoxPredictor_4/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "Shape_10"
  op: "Shape"
  input: "Squeeze_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_10"
  op: "StridedSlice"
  input: "Shape_10"
  input: "strided_slice_10/stack"
  input: "strided_slice_10/stack_1"
  input: "strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "add_4"
  op: "Add"
  input: "add_3"
  input: "strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_4_3x3_s2_256/Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/convolution"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Shape_3"
  op: "Shape"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/strided_slice_3"
  op: "StridedSlice"
  input: "FeatureExtractor/MobilenetV1/Shape_3"
  input: "FeatureExtractor/MobilenetV1/strided_slice_3/stack"
  input: "FeatureExtractor/MobilenetV1/strided_slice_3/stack_1"
  input: "FeatureExtractor/MobilenetV1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_7/shape"
  op: "Pack"
  input: "FeatureExtractor/MobilenetV1/strided_slice_3"
  input: "FeatureExtractor/MobilenetV1/zeros_7/shape/1"
  input: "FeatureExtractor/MobilenetV1/zeros_7/shape/2"
  input: "FeatureExtractor/MobilenetV1/zeros_7/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_7"
  op: "Fill"
  input: "FeatureExtractor/MobilenetV1/zeros_7/shape"
  input: "FeatureExtractor/MobilenetV1/zeros_7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_6/shape"
  op: "Pack"
  input: "FeatureExtractor/MobilenetV1/strided_slice_3"
  input: "FeatureExtractor/MobilenetV1/zeros_6/shape/1"
  input: "FeatureExtractor/MobilenetV1/zeros_6/shape/2"
  input: "FeatureExtractor/MobilenetV1/zeros_6/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/zeros_6"
  op: "Fill"
  input: "FeatureExtractor/MobilenetV1/zeros_6/shape"
  input: "FeatureExtractor/MobilenetV1/zeros_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/concat_6"
  op: "ConcatV2"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_1_Conv2d_5_1x1_64/Relu6"
  input: "FeatureExtractor/MobilenetV1/zeros_6"
  input: "FeatureExtractor/MobilenetV1/concat_6/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/concat_7"
  op: "ConcatV2"
  input: "FeatureExtractor/MobilenetV1/concat_6"
  input: "FeatureExtractor/MobilenetV1/zeros_7"
  input: "FeatureExtractor/MobilenetV1/concat_7/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/concat_7"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/convolution"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.001
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BoxPredictor_5/Shape"
  op: "Shape"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BoxPredictor_5/strided_slice"
  op: "StridedSlice"
  input: "BoxPredictor_5/Shape"
  input: "BoxPredictor_5/strided_slice/stack"
  input: "BoxPredictor_5/strided_slice/stack_1"
  input: "BoxPredictor_5/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "BoxPredictor_5/stack_1"
  op: "Pack"
  input: "BoxPredictor_5/strided_slice"
  input: "BoxPredictor_5/stack_1/1"
  input: "BoxPredictor_5/stack_1/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "BoxPredictor_5/stack"
  op: "Pack"
  input: "BoxPredictor_5/strided_slice"
  input: "BoxPredictor_5/stack/1"
  input: "BoxPredictor_5/stack/2"
  input: "BoxPredictor_5/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "BoxPredictor_5/ClassPredictor/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/Relu6"
  input: "BoxPredictor_5/ClassPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "BoxPredictor_5/ClassPredictor/BiasAdd"
  op: "BiasAdd"
  input: "BoxPredictor_5/ClassPredictor/convolution"
  input: "BoxPredictor_5/ClassPredictor/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "BoxPredictor_5/Reshape_1"
  op: "Reshape"
  input: "BoxPredictor_5/ClassPredictor/BiasAdd"
  input: "BoxPredictor_5/stack_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BoxPredictor_5/BoxEncodingPredictor/convolution"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV1/Conv2d_13_pointwise_2_Conv2d_5_3x3_s2_128/Relu6"
  input: "BoxPredictor_5/BoxEncodingPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "BoxPredictor_5/BoxEncodingPredictor/BiasAdd"
  op: "BiasAdd"
  input: "BoxPredictor_5/BoxEncodingPredictor/convolution"
  input: "BoxPredictor_5/BoxEncodingPredictor/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "BoxPredictor_5/Reshape"
  op: "Reshape"
  input: "BoxPredictor_5/BoxEncodingPredictor/BiasAdd"
  input: "BoxPredictor_5/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Squeeze_5"
  op: "Squeeze"
  input: "BoxPredictor_5/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "Shape_11"
  op: "Shape"
  input: "Squeeze_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_11"
  op: "StridedSlice"
  input: "Shape_11"
  input: "strided_slice_11/stack"
  input: "strided_slice_11/stack_1"
  input: "strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "add_5"
  op: "Add"
  input: "add_4"
  input: "strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "assert_equal/Equal"
  op: "Equal"
  input: "strided_slice_12"
  input: "add_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "assert_equal/All"
  op: "All"
  input: "assert_equal/Equal"
  input: "assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "assert_equal/Assert/Assert"
  op: "Assert"
  input: "assert_equal/All"
  input: "assert_equal/Assert/Assert/data_0"
  input: "strided_slice_12"
  input: "add_5"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  input: "^assert_equal/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "BoxPredictor_0/Reshape_1"
  input: "BoxPredictor_1/Reshape_1"
  input: "BoxPredictor_2/Reshape_1"
  input: "BoxPredictor_3/Reshape_1"
  input: "BoxPredictor_4/Reshape_1"
  input: "BoxPredictor_5/Reshape_1"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Slice"
  op: "Slice"
  input: "concat_1"
  input: "Postprocessor/Slice/begin"
  input: "Postprocessor/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Sigmoid"
  op: "Sigmoid"
  input: "Postprocessor/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/Shape"
  op: "Shape"
  input: "Postprocessor/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  input: "^assert_equal/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "Squeeze"
  input: "Squeeze_1"
  input: "Squeeze_2"
  input: "Squeeze_3"
  input: "Squeeze_4"
  input: "Squeeze_5"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Reshape_1"
  op: "Reshape"
  input: "concat"
  input: "Postprocessor/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose/Rank"
  op: "Rank"
  input: "Postprocessor/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose/Range"
  op: "Range"
  input: "Postprocessor/Decode/transpose/Range/start"
  input: "Postprocessor/Decode/transpose/Rank"
  input: "Postprocessor/Decode/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose/sub"
  op: "Sub"
  input: "Postprocessor/Decode/transpose/Rank"
  input: "Postprocessor/Decode/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose/sub_1"
  op: "Sub"
  input: "Postprocessor/Decode/transpose/sub"
  input: "Postprocessor/Decode/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose"
  op: "Transpose"
  input: "Postprocessor/Reshape_1"
  input: "Postprocessor/Decode/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/unstack"
  op: "Unpack"
  input: "Postprocessor/Decode/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "Postprocessor/Decode/div_3"
  op: "RealDiv"
  input: "Postprocessor/Decode/unstack:3"
  input: "Postprocessor/Decode/div_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/Exp"
  op: "Exp"
  input: "Postprocessor/Decode/div_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/div_2"
  op: "RealDiv"
  input: "Postprocessor/Decode/unstack:2"
  input: "Postprocessor/Decode/div_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/Exp_1"
  op: "Exp"
  input: "Postprocessor/Decode/div_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/div_1"
  op: "RealDiv"
  input: "Postprocessor/Decode/unstack:1"
  input: "Postprocessor/Decode/div_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/div"
  op: "RealDiv"
  input: "Postprocessor/Decode/unstack"
  input: "Postprocessor/Decode/div/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Shape"
  op: "Shape"
  input: "concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/Shape"
  input: "Postprocessor/strided_slice/stack"
  input: "Postprocessor/strided_slice/stack_1"
  input: "Postprocessor/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/stack"
  op: "Pack"
  input: "Postprocessor/strided_slice"
  input: "Postprocessor/stack/1"
  input: "Postprocessor/stack/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/Tile/multiples"
  op: "Pack"
  input: "Postprocessor/strided_slice"
  input: "Postprocessor/Tile/multiples/1"
  input: "Postprocessor/Tile/multiples/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Preprocessor/map/while/Identity_1"
  op: "Identity"
  input: "Preprocessor/map/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Preprocessor/map/TensorArray"
  op: "TensorArrayV3"
  input: "Preprocessor/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Preprocessor/map/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "Preprocessor/map/TensorArray"
  attr {
    key: "T"
    value {
      type: 20
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Preprocessor/map/while/Preprocessor/map/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "Preprocessor/map/TensorArray"
  input: "Preprocessor/map/TensorArrayUnstack/range"
  input: "ToFloat"
  input: "Preprocessor/map/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ToFloat"
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "Preprocessor/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Preprocessor/map/while/Preprocessor/map/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "Preprocessor/map/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "Preprocessor/map/while/TensorArrayReadV3/Enter"
  input: "Preprocessor/map/while/Identity"
  input: "Preprocessor/map/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/ExpandDims"
  op: "ExpandDims"
  input: "Preprocessor/map/while/TensorArrayReadV3"
  input: "Preprocessor/map/while/ResizeImage/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/ResizeBilinear"
  op: "ResizeBilinear"
  input: "Preprocessor/map/while/ResizeImage/ExpandDims"
  input: "Preprocessor/map/while/ResizeImage/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/Squeeze"
  op: "Squeeze"
  input: "Preprocessor/map/while/ResizeImage/ResizeBilinear"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "Preprocessor/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "Preprocessor/map/while/Identity"
  input: "Preprocessor/map/while/ResizeImage/Squeeze"
  input: "Preprocessor/map/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/while/ResizeImage/Squeeze"
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/NextIteration_1"
  op: "NextIteration"
  input: "Preprocessor/map/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_12"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/ToFloat_24"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_11"
  op: "StridedSlice"
  input: "MultipleGridAnchorGenerator/mul_12"
  input: "MultipleGridAnchorGenerator/strided_slice_11/stack"
  input: "MultipleGridAnchorGenerator/strided_slice_11/stack_1"
  input: "MultipleGridAnchorGenerator/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_50"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_49"
  input: "MultipleGridAnchorGenerator/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/mul_50"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_16/Tile"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_10"
  op: "StridedSlice"
  input: "MultipleGridAnchorGenerator/mul_12"
  input: "MultipleGridAnchorGenerator/strided_slice_10/stack"
  input: "MultipleGridAnchorGenerator/strided_slice_10/stack_1"
  input: "MultipleGridAnchorGenerator/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_48"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/div_17"
  input: "MultipleGridAnchorGenerator/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/mul_48"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_17/Tile"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/stack_11"
  op: "Pack"
  input: "MultipleGridAnchorGenerator/Meshgrid_17/Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_16/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 3
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape_11"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/stack_11"
  input: "MultipleGridAnchorGenerator/Reshape_11/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_54"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_54/x"
  input: "MultipleGridAnchorGenerator/Reshape_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/add_17"
  op: "Add"
  input: "MultipleGridAnchorGenerator/Reshape_10"
  input: "MultipleGridAnchorGenerator/mul_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_53"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_53/x"
  input: "MultipleGridAnchorGenerator/Reshape_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/sub_5"
  op: "Sub"
  input: "MultipleGridAnchorGenerator/Reshape_10"
  input: "MultipleGridAnchorGenerator/mul_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/concat_5"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/sub_5"
  input: "MultipleGridAnchorGenerator/add_17"
  input: "MultipleGridAnchorGenerator/concat_5/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_9"
  op: "StridedSlice"
  input: "MultipleGridAnchorGenerator/mul_12"
  input: "MultipleGridAnchorGenerator/strided_slice_9/stack"
  input: "MultipleGridAnchorGenerator/strided_slice_9/stack_1"
  input: "MultipleGridAnchorGenerator/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_43"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_42"
  input: "MultipleGridAnchorGenerator/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/mul_43"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_13/Tile"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_8"
  op: "StridedSlice"
  input: "MultipleGridAnchorGenerator/mul_12"
  input: "MultipleGridAnchorGenerator/strided_slice_8/stack"
  input: "MultipleGridAnchorGenerator/strided_slice_8/stack_1"
  input: "MultipleGridAnchorGenerator/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_41"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/div_16"
  input: "MultipleGridAnchorGenerator/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/mul_41"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_14/Tile"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/stack_9"
  op: "Pack"
  input: "MultipleGridAnchorGenerator/Meshgrid_14/Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_13/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 3
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape_9"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/stack_9"
  input: "MultipleGridAnchorGenerator/Reshape_9/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_47"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_47/x"
  input: "MultipleGridAnchorGenerator/Reshape_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/add_14"
  op: "Add"
  input: "MultipleGridAnchorGenerator/Reshape_8"
  input: "MultipleGridAnchorGenerator/mul_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_46"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_46/x"
  input: "MultipleGridAnchorGenerator/Reshape_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/sub_4"
  op: "Sub"
  input: "MultipleGridAnchorGenerator/Reshape_8"
  input: "MultipleGridAnchorGenerator/mul_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/concat_4"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/sub_4"
  input: "MultipleGridAnchorGenerator/add_14"
  input: "MultipleGridAnchorGenerator/concat_4/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_7"
  op: "StridedSlice"
  input: "MultipleGridAnchorGenerator/mul_12"
  input: "MultipleGridAnchorGenerator/strided_slice_7/stack"
  input: "MultipleGridAnchorGenerator/strided_slice_7/stack_1"
  input: "MultipleGridAnchorGenerator/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_36"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_35"
  input: "MultipleGridAnchorGenerator/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/mul_36"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_10/Tile"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_6"
  op: "StridedSlice"
  input: "MultipleGridAnchorGenerator/mul_12"
  input: "MultipleGridAnchorGenerator/strided_slice_6/stack"
  input: "MultipleGridAnchorGenerator/strided_slice_6/stack_1"
  input: "MultipleGridAnchorGenerator/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_34"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/div_15"
  input: "MultipleGridAnchorGenerator/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/mul_34"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_11/Tile"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/stack_7"
  op: "Pack"
  input: "MultipleGridAnchorGenerator/Meshgrid_11/Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_10/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 3
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape_7"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/stack_7"
  input: "MultipleGridAnchorGenerator/Reshape_7/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_40"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_40/x"
  input: "MultipleGridAnchorGenerator/Reshape_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/add_11"
  op: "Add"
  input: "MultipleGridAnchorGenerator/Reshape_6"
  input: "MultipleGridAnchorGenerator/mul_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_39"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_39/x"
  input: "MultipleGridAnchorGenerator/Reshape_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/sub_3"
  op: "Sub"
  input: "MultipleGridAnchorGenerator/Reshape_6"
  input: "MultipleGridAnchorGenerator/mul_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/concat_3"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/sub_3"
  input: "MultipleGridAnchorGenerator/add_11"
  input: "MultipleGridAnchorGenerator/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_5"
  op: "StridedSlice"
  input: "MultipleGridAnchorGenerator/mul_12"
  input: "MultipleGridAnchorGenerator/strided_slice_5/stack"
  input: "MultipleGridAnchorGenerator/strided_slice_5/stack_1"
  input: "MultipleGridAnchorGenerator/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_29"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_28"
  input: "MultipleGridAnchorGenerator/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/mul_29"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_7/Tile"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_4"
  op: "StridedSlice"
  input: "MultipleGridAnchorGenerator/mul_12"
  input: "MultipleGridAnchorGenerator/strided_slice_4/stack"
  input: "MultipleGridAnchorGenerator/strided_slice_4/stack_1"
  input: "MultipleGridAnchorGenerator/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_27"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/div_14"
  input: "MultipleGridAnchorGenerator/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/mul_27"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_8/Tile"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/stack_5"
  op: "Pack"
  input: "MultipleGridAnchorGenerator/Meshgrid_8/Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_7/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 3
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape_5"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/stack_5"
  input: "MultipleGridAnchorGenerator/Reshape_5/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_33"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_33/x"
  input: "MultipleGridAnchorGenerator/Reshape_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/add_8"
  op: "Add"
  input: "MultipleGridAnchorGenerator/Reshape_4"
  input: "MultipleGridAnchorGenerator/mul_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_32"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_32/x"
  input: "MultipleGridAnchorGenerator/Reshape_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/sub_2"
  op: "Sub"
  input: "MultipleGridAnchorGenerator/Reshape_4"
  input: "MultipleGridAnchorGenerator/mul_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/concat_2"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/sub_2"
  input: "MultipleGridAnchorGenerator/add_8"
  input: "MultipleGridAnchorGenerator/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_3"
  op: "StridedSlice"
  input: "MultipleGridAnchorGenerator/mul_12"
  input: "MultipleGridAnchorGenerator/strided_slice_3/stack"
  input: "MultipleGridAnchorGenerator/strided_slice_3/stack_1"
  input: "MultipleGridAnchorGenerator/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_22"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_21"
  input: "MultipleGridAnchorGenerator/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/mul_22"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_4/Tile"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_2"
  op: "StridedSlice"
  input: "MultipleGridAnchorGenerator/mul_12"
  input: "MultipleGridAnchorGenerator/strided_slice_2/stack"
  input: "MultipleGridAnchorGenerator/strided_slice_2/stack_1"
  input: "MultipleGridAnchorGenerator/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_20"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/div_13"
  input: "MultipleGridAnchorGenerator/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/mul_20"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_5/Tile"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/stack_3"
  op: "Pack"
  input: "MultipleGridAnchorGenerator/Meshgrid_5/Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_4/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 3
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape_3"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/stack_3"
  input: "MultipleGridAnchorGenerator/Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_26"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_26/x"
  input: "MultipleGridAnchorGenerator/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/add_5"
  op: "Add"
  input: "MultipleGridAnchorGenerator/Reshape_2"
  input: "MultipleGridAnchorGenerator/mul_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_25"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_25/x"
  input: "MultipleGridAnchorGenerator/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/sub_1"
  op: "Sub"
  input: "MultipleGridAnchorGenerator/Reshape_2"
  input: "MultipleGridAnchorGenerator/mul_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/concat_1"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/sub_1"
  input: "MultipleGridAnchorGenerator/add_5"
  input: "MultipleGridAnchorGenerator/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice_1"
  op: "StridedSlice"
  input: "MultipleGridAnchorGenerator/mul_12"
  input: "MultipleGridAnchorGenerator/strided_slice_1/stack"
  input: "MultipleGridAnchorGenerator/strided_slice_1/stack_1"
  input: "MultipleGridAnchorGenerator/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_15"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_14"
  input: "MultipleGridAnchorGenerator/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/mul_15"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/Tile"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice"
  op: "StridedSlice"
  input: "MultipleGridAnchorGenerator/mul_12"
  input: "MultipleGridAnchorGenerator/strided_slice/stack"
  input: "MultipleGridAnchorGenerator/strided_slice/stack_1"
  input: "MultipleGridAnchorGenerator/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_13"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/div_12"
  input: "MultipleGridAnchorGenerator/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/mul_13"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/Tile"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/stack_1"
  op: "Pack"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 3
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape_1"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/stack_1"
  input: "MultipleGridAnchorGenerator/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_19"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_19/x"
  input: "MultipleGridAnchorGenerator/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/add_2"
  op: "Add"
  input: "MultipleGridAnchorGenerator/Reshape"
  input: "MultipleGridAnchorGenerator/mul_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_18"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_18/x"
  input: "MultipleGridAnchorGenerator/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/sub"
  op: "Sub"
  input: "MultipleGridAnchorGenerator/Reshape"
  input: "MultipleGridAnchorGenerator/mul_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/sub"
  input: "MultipleGridAnchorGenerator/add_2"
  input: "MultipleGridAnchorGenerator/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Concatenate/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/concat"
  input: "MultipleGridAnchorGenerator/concat_1"
  input: "MultipleGridAnchorGenerator/concat_2"
  input: "MultipleGridAnchorGenerator/concat_3"
  input: "MultipleGridAnchorGenerator/concat_4"
  input: "MultipleGridAnchorGenerator/concat_5"
  input: "MultipleGridAnchorGenerator/Concatenate/concat/axis"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Identity"
  op: "Identity"
  input: "MultipleGridAnchorGenerator/Concatenate/concat"
  input: "^MultipleGridAnchorGenerator/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Identity"
  input: "Postprocessor/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Tile"
  op: "Tile"
  input: "Postprocessor/ExpandDims"
  input: "Postprocessor/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Reshape"
  op: "Reshape"
  input: "Postprocessor/Tile"
  input: "Postprocessor/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/Rank"
  op: "Rank"
  input: "Postprocessor/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/Range"
  op: "Range"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/Range/start"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/Rank"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/sub"
  op: "Sub"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/Rank"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/sub_1"
  op: "Sub"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/sub"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose"
  op: "Transpose"
  input: "Postprocessor/Reshape"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/unstack"
  op: "Unpack"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/sub_1"
  op: "Sub"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/unstack:2"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/unstack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/mul_2"
  op: "Mul"
  input: "Postprocessor/Decode/div"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/mul_1"
  op: "Mul"
  input: "Postprocessor/Decode/Exp_1"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/div_6"
  op: "RealDiv"
  input: "Postprocessor/Decode/mul_1"
  input: "Postprocessor/Decode/div_6/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/div_4"
  op: "RealDiv"
  input: "Postprocessor/Decode/mul_1"
  input: "Postprocessor/Decode/div_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/div"
  op: "RealDiv"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/sub_1"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/div/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/add"
  op: "Add"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/unstack"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/div"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/add"
  op: "Add"
  input: "Postprocessor/Decode/mul_2"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/add_2"
  op: "Add"
  input: "Postprocessor/Decode/add"
  input: "Postprocessor/Decode/div_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/sub"
  op: "Sub"
  input: "Postprocessor/Decode/add"
  input: "Postprocessor/Decode/div_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/sub"
  op: "Sub"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/unstack:3"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/mul_3"
  op: "Mul"
  input: "Postprocessor/Decode/div_1"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/mul"
  op: "Mul"
  input: "Postprocessor/Decode/Exp"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/div_7"
  op: "RealDiv"
  input: "Postprocessor/Decode/mul"
  input: "Postprocessor/Decode/div_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/div_5"
  op: "RealDiv"
  input: "Postprocessor/Decode/mul"
  input: "Postprocessor/Decode/div_5/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/div_1"
  op: "RealDiv"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/sub"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/div_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/add_1"
  op: "Add"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/unstack:1"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/div_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/add_1"
  op: "Add"
  input: "Postprocessor/Decode/mul_3"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/add_3"
  op: "Add"
  input: "Postprocessor/Decode/add_1"
  input: "Postprocessor/Decode/div_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/sub_1"
  op: "Sub"
  input: "Postprocessor/Decode/add_1"
  input: "Postprocessor/Decode/div_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/stack"
  op: "Pack"
  input: "Postprocessor/Decode/sub"
  input: "Postprocessor/Decode/sub_1"
  input: "Postprocessor/Decode/add_2"
  input: "Postprocessor/Decode/add_3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose_1/Rank"
  op: "Rank"
  input: "Postprocessor/Decode/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose_1/Range"
  op: "Range"
  input: "Postprocessor/Decode/transpose_1/Range/start"
  input: "Postprocessor/Decode/transpose_1/Rank"
  input: "Postprocessor/Decode/transpose_1/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose_1/sub"
  op: "Sub"
  input: "Postprocessor/Decode/transpose_1/Rank"
  input: "Postprocessor/Decode/transpose_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose_1/sub_1"
  op: "Sub"
  input: "Postprocessor/Decode/transpose_1/sub"
  input: "Postprocessor/Decode/transpose_1/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose_1"
  op: "Transpose"
  input: "Postprocessor/Decode/stack"
  input: "Postprocessor/Decode/transpose_1/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Reshape_2"
  op: "Reshape"
  input: "Postprocessor/Decode/transpose_1"
  input: "Postprocessor/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/ExpandDims_1"
  op: "ExpandDims"
  input: "Postprocessor/Reshape_2"
  input: "Postprocessor/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "Postprocessor/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/Shape"
  op: "Shape"
  input: "Postprocessor/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Less/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Postprocessor/BatchMultiClassNonMaxSuppression/map/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Less"
  op: "Less"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LoopCond"
  op: "LoopCond"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Less"
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/add/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/add"
  op: "Add"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration"
  op: "NextIteration"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/strided_slice/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/strided_slice/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/strided_slice/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_3/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_3/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_3/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_3/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_1/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_1/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_1/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_1/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range/delta"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range/start"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum_2/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_4/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_4/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_4/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Assert/Assert/data_0"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Incorrect field size: actual vs expected."
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_3/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_1/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/add_1/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum_1/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_3/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_3/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_3/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Reshape/shape"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Greater/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Area/split/split_dim"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/concat/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/unstack"
  op: "Unpack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack/Enter"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/split/split_dim"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan_1/Reshape/shape"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan_1/Greater/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-08
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/add/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Reshape/shape"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Greater/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/split/split_dim"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/concat/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack"
  op: "Unpack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack/Enter"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/split/split_dim"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan/Reshape/shape"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan/Greater/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-08
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Assert/Assert/data_0"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Incorrect scores field length: actual vs expected."
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_1/shape"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice_1/begin"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_1/1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape/shape"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice/begin"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack/2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack/1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_8"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_4/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_8"
  attr {
    key: "T"
    value {
      type: 20
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/strided_slice"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Postprocessor/BatchMultiClassNonMaxSuppression/map/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_5"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_8:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Postprocessor/BatchMultiClassNonMaxSuppression/map/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_5"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_5"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_5"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_5"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_5"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_5"
  op: "Exit"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_8"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_8"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_8"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_8"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "Postprocessor/ToFloat"
  op: "Cast"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/TensorArrayGatherV3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "num_detections"
  op: "Identity"
  input: "Postprocessor/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_5"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_5:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_6"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_2/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_6"
  attr {
    key: "T"
    value {
      type: 20
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Merge"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Postprocessor/BatchMultiClassNonMaxSuppression/map/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_3"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Postprocessor/BatchMultiClassNonMaxSuppression/map/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_3"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_3"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_3"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_3"
  op: "Exit"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_6"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_6"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
}
node {
  name: "add_6"
  op: "Add"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/TensorArrayGatherV3"
  input: "add_6/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "detection_classes"
  op: "Identity"
  input: "add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_3"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_5"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_5"
  attr {
    key: "T"
    value {
      type: 20
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Merge"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Postprocessor/BatchMultiClassNonMaxSuppression/map/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_2"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_5:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Postprocessor/BatchMultiClassNonMaxSuppression/map/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_2"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_2"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_2"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_2"
  op: "Exit"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_5"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_5"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_5"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_5"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
}
node {
  name: "detection_scores"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/TensorArrayGatherV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_2"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_4"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_4"
  attr {
    key: "T"
    value {
      type: 20
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Merge"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Postprocessor/BatchMultiClassNonMaxSuppression/map/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_1"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Postprocessor/BatchMultiClassNonMaxSuppression/map/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_1"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_1"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_1"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_1"
  op: "Exit"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_4"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_4"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 4
        }
      }
    }
  }
}
node {
  name: "detection_boxes"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/TensorArrayGatherV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_3"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_3"
  attr {
    key: "T"
    value {
      type: 20
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Postprocessor/BatchMultiClassNonMaxSuppression/map/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_1"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_1/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_1"
  attr {
    key: "T"
    value {
      type: 20
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Postprocessor/BatchMultiClassNonMaxSuppression/map/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/range"
  input: "Postprocessor/Sigmoid"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/Sigmoid"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_1/Enter_1"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Postprocessor/BatchMultiClassNonMaxSuppression/map/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_1/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_1/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray"
  attr {
    key: "T"
    value {
      type: 20
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Postprocessor/BatchMultiClassNonMaxSuppression/map/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/range"
  input: "Postprocessor/ExpandDims_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/ExpandDims_1"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Postprocessor/BatchMultiClassNonMaxSuppression/map/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/Shape"
  op: "Shape"
  input: "Postprocessor/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/ones/shape"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/ones"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/ones/shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/mul"
  op: "Mul"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/ones"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/Shape"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/mul"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/mul"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_3:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/mul"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3/Enter_1"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Postprocessor/BatchMultiClassNonMaxSuppression/map/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3"
  op: "TensorArrayReadV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_1"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_1/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice_1"
  op: "Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice_1/begin"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_1"
  op: "Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape_1"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack/1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice"
  op: "Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice/begin"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape"
  op: "Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/unstack"
  op: "Unpack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Equal"
  op: "Equal"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Assert/Assert"
  op: "Assert"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Equal"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Assert/Assert/data_0"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Reshape_1/shape"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Slice_1/begin"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/stack_1/1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/stack_1"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/stack_1/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Slice_1"
  op: "Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Slice_1/begin"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/stack_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Reshape_1"
  op: "Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Slice_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan_1/Greater"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Reshape_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan_1/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan_1/Where"
  op: "Where"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan_1/Greater"
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan_1/Reshape"
  op: "Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan_1/Where"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan_1/Cast"
  op: "Cast"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan_1/Reshape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan_1/Gather/Gather_2"
  op: "Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Reshape_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan_1/Cast"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan_1/Gather/Gather"
  op: "Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/unstack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan_1/Cast"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/split"
  op: "Split"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/split/split_dim"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan_1/Gather/Gather"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Minimum_3"
  op: "Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/split:3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/unstack:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Maximum_3"
  op: "Maximum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Minimum_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Minimum_2"
  op: "Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/split:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/unstack:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Maximum_2"
  op: "Maximum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Minimum_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Minimum_1"
  op: "Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/split:2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Maximum_1"
  op: "Maximum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Minimum_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/unstack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Minimum"
  op: "Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/split"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Maximum"
  op: "Maximum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/unstack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/concat"
  op: "ConcatV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Maximum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Maximum_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Maximum_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Maximum_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Area/split"
  op: "Split"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Area/split/split_dim"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Area/sub_1"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Area/split:3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Area/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Area/sub"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Area/split:2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Area/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Area/mul"
  op: "Mul"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Area/sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Area/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Area/Squeeze"
  op: "Squeeze"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Area/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Greater"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Area/Squeeze"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Where"
  op: "Where"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Greater"
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Reshape"
  op: "Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Where"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Cast"
  op: "Cast"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Reshape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Gather/Gather_2"
  op: "Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan_1/Gather/Gather_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Cast"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Gather/Gather"
  op: "Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/concat"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Cast"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape_3"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Gather/Gather"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_3"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_3/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_3/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum_1"
  op: "Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum_1/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/NonMaxSuppression_1"
  op: "NonMaxSuppression"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Gather/Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Gather/Gather_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum_1"
  attr {
    key: "iou_threshold"
    value {
      f: 0.4
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/Gather_2"
  op: "Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Gather/Gather_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/NonMaxSuppression_1"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/zeros_like_1"
  op: "ZerosLike"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/Gather_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/add_1"
  op: "Add"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/zeros_like_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/Gather"
  op: "Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow_1/Gather/Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/NonMaxSuppression_1"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Reshape/shape"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Slice/begin"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/stack/1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/stack"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Slice"
  op: "Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Slice/begin"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Reshape"
  op: "Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan/Greater"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan/Where"
  op: "Where"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan/Greater"
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan/Reshape"
  op: "Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan/Where"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan/Cast"
  op: "Cast"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan/Reshape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan/Gather/Gather_2"
  op: "Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan/Cast"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan/Gather/Gather"
  op: "Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/unstack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan/Cast"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/split"
  op: "Split"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/split/split_dim"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan/Gather/Gather"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Minimum_3"
  op: "Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/split:3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Maximum_3"
  op: "Maximum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Minimum_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Minimum_2"
  op: "Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/split:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Maximum_2"
  op: "Maximum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Minimum_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Minimum_1"
  op: "Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/split:2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Maximum_1"
  op: "Maximum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Minimum_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Minimum"
  op: "Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/split"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Maximum"
  op: "Maximum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/concat"
  op: "ConcatV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Maximum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Maximum_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Maximum_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Maximum_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/concat/axis"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/split"
  op: "Split"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/split/split_dim"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/sub_1"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/split:3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/sub"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/split:2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/mul"
  op: "Mul"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/Squeeze"
  op: "Squeeze"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Greater"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/Squeeze"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Where"
  op: "Where"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Greater"
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Reshape"
  op: "Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Where"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Cast"
  op: "Cast"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Reshape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/Gather_2"
  op: "Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/FilterGreaterThan/Gather/Gather_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Cast"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/Gather"
  op: "Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/concat"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Cast"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape_2"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/Gather"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum"
  op: "Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/NonMaxSuppression"
  op: "NonMaxSuppression"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/Gather_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum"
  attr {
    key: "iou_threshold"
    value {
      f: 0.4
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/Gather_2"
  op: "Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/Gather_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/NonMaxSuppression"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_3"
  op: "ConcatV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/Gather_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/Gather_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Size"
  op: "Size"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/zeros_like"
  op: "ZerosLike"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/Gather_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/add"
  op: "Add"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/zeros_like"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_1"
  op: "ConcatV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/add"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/add_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/Gather"
  op: "Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/NonMaxSuppression"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat"
  op: "ConcatV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Shape"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Equal"
  op: "Equal"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Assert/Assert"
  op: "Assert"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Equal"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Assert/Assert/data_0"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Size"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/TopKV2"
  op: "TopKV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "sorted"
    value {
      b: true
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/Gather_3"
  op: "Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/TopKV2:1"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/Gather_1"
  op: "Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/TopKV2:1"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/Gather"
  op: "Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/TopKV2:1"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape_4"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/Gather"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_4"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_4/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_4/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum_2"
  op: "Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum_2/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/Gather_3"
  op: "Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/Gather_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_3"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/Gather_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_3"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_3/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_3/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_3"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/pred_id"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Shape/Switch"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/Gather_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/Gather_3"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Shape"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Shape/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Gather/Switch"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/Gather_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/Gather_3"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Switch"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/switch_f"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/concat/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/zeros/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Greater/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/ExpandDims/dim"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/sub/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/strided_slice/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/strided_slice/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/strided_slice/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/sub"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/sub/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/ExpandDims"
  op: "ExpandDims"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Rank"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Greater"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Rank"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/pred_id"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Greater"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/sub/Switch"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/strided_slice"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/concat/Switch"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/ExpandDims"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/ExpandDims"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/strided_slice/Switch"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Shape"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/Switch"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Greater"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/switch_f"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/ExpandDims/dim"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/sub/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/sub"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/sub/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/sub/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/ExpandDims"
  op: "ExpandDims"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/Merge"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/ExpandDims"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/concat"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/zeros"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/concat"
  op: "ConcatV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Shape/Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/zeros"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Merge"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/concat"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Gather"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_1/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Merge"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_2"
  op: "NextIteration"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_1/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/switch_t"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/concat/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/strided_slice/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/strided_slice/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/strided_slice/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/strided_slice/Switch:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/concat"
  op: "ConcatV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/concat/Switch:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/cond/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/switch_t"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/range/delta"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/range/limit"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/range/start"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/range/limit"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Gather"
  op: "Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/Gather/Switch:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_3/range"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/Gather_1"
  op: "Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/Gather_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_1"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/Gather_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_1"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_1/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_1/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_1"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/pred_id"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Shape/Switch"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/Gather_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/Gather_1"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Shape"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Shape/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Gather/Switch"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/Gather_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/Gather_1"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Switch"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/switch_f"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/concat/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/zeros/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Greater/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/ExpandDims/dim"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/sub/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/strided_slice/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/strided_slice/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/strided_slice/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/sub"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/sub/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/ExpandDims"
  op: "ExpandDims"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Rank"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Greater"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Rank"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/pred_id"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Greater"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/sub/Switch"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/strided_slice"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/concat/Switch"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/ExpandDims"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/ExpandDims"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/strided_slice/Switch"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Shape"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/Switch"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Greater"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/switch_f"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/ExpandDims/dim"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/sub/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/sub"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/sub/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/sub/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/ExpandDims"
  op: "ExpandDims"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/Merge"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/ExpandDims"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/concat"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/zeros"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/concat"
  op: "ConcatV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Shape/Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/zeros"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Merge"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/concat"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Gather"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_2/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_2/TensorArrayWriteV3/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Merge"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_3"
  op: "NextIteration"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_2/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/switch_t"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/concat/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/strided_slice/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/strided_slice/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/strided_slice/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/strided_slice/Switch:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/concat"
  op: "ConcatV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/concat/Switch:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/cond/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/switch_t"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/range/delta"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/range/limit"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/range/start"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/range/limit"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Gather"
  op: "Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/Gather/Switch:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond_1/range"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/Gather"
  op: "Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Shape"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/Gather"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_4/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_4/TensorArrayWriteV3/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/strided_slice"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_5"
  op: "NextIteration"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_4/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/Gather"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/pred_id"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Shape/Switch"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/Gather"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Shape"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Shape/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Gather/Switch"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/Gather"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Switch"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/switch_f"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/concat/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/zeros/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Greater/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/ExpandDims/dim"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/sub/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/strided_slice/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/strided_slice/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/strided_slice/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/sub"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/sub/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/ExpandDims"
  op: "ExpandDims"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Rank"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Greater"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Rank"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/pred_id"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Greater"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/sub/Switch"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/strided_slice"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/concat/Switch"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/ExpandDims"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/ExpandDims"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/strided_slice/Switch"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Shape"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/Switch"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Greater"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/switch_f"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/ExpandDims/dim"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/sub/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/sub"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/sub/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/sub/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/ExpandDims"
  op: "ExpandDims"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/Merge"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/ExpandDims"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/concat"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/zeros"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/concat"
  op: "ConcatV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Shape/Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/zeros"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Merge"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/concat"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Gather"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Merge"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_1"
  op: "NextIteration"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/switch_t"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/concat/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/strided_slice/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/strided_slice/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/strided_slice/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/strided_slice/Switch:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/concat"
  op: "ConcatV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/concat/Switch:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/cond/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/switch_t"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/range/delta"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/range/limit"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/range/start"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/range/limit"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Gather"
  op: "Gather"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/Gather/Switch:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/cond/range"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
library {
}
